@page "/staff"
@page "/staff/{id:int}"
@inject IStaffService StaffService
@inject NavigationManager NavigationManager

@if (Id.HasValue)
{
	<PageTitle>Edit @StaffData.Name</PageTitle>
	<h3>Edit @StaffData.Name</h3>
}
else
{
	<PageTitle>Create a new User</PageTitle>
	<h3>Create a new Staff</h3>
}

<div class="container rounded bg-white mt-5 mb-5">
	<div class="row">
		<div class="col-md-3 border-right">
			<div class="d-flex flex-column align-items-center text-center p-3 py-5">
				<img class="rounded-circle mt-5" width="150px" src="https://st3.depositphotos.com/15648834/17930/v/600/depositphotos_179308454-stock-illustration-unknown-person-silhouette-glasses-profile.jpg">
				@if (Id.HasValue)
				{
					<span class="font-weight-bold">@StaffData.Name</span>
				}
				<span> </span>
			</div>
		</div>
		<div class="col-md-5 border-right">
			<div class="p-3 py-5">
				<div class="d-flex justify-content-between align-items-center mb-3">
					<h4 class="text-right">User Settings</h4>
				</div>
				<div class="row mt-3">
					<EditForm Model="StaffData" OnSubmit="HandleSubmit">
						<div class="col-md-15">
							<label for="Name">Name</label>
							<InputText id="Name" @bind-Value="StaffData.Name" class="form-control" />
						</div>
						<div class="col-md-15">
							<label for="Email">Email</label>
							<InputText id="Email" @bind-Value="StaffData.Email" class="form-control" />
						</div>
						<div class="col-md-15">
							<label for="dob">Date Of Birth</label>
							<InputDate id="dob" @bind-Value="StaffData.DateOfBirth" class="form-control"/>
						</div>
						<div class="col-md-15">
							<label for="pw">Password</label>
							<InputText id="pw" @bind-Value="StaffData.Password" class="form-control" />
						</div>
						<div class="col-md-15">
							<label for="address">Address</label>
							<InputText id="address" @bind-Value="StaffData.Address" class="form-control" />
						</div>
						<div>
							<label for="genderType">Gender</label>
							<select id="genderType" class="form-control" @bind="@StaffData.Gender">
								@foreach (var genderType in GenderTypes)
								{
									<option value="@genderType.Id">@genderType.Name</option>
								}
							</select>
						</div>
						<br/>
						<button type="submit" class="btn btn-primary">@_confirmText</button>
						<button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
</div>


@code {
	public string? UserName { get; set; }
	public AJSNutritions.Shared.Domain.Staff StaffData { get; set; } = new()
	{
		Name = "",
		Email = "",
		Password = "",
		Address = "",
		Phone = 0,
		StaffType = "",
		Gender = 0,
		DateOfBirth = DateTime.Now
	};

	[Parameter] public int? Id { get; set; }

	[CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

	
	string _confirmText = "Create";

	protected override async Task OnInitializedAsync()
	{
		if (AuthenticationStateTask != null)
		{
			var authState = await AuthenticationStateTask;
			var user = authState.User;

			if (user.Identity is not null && user.Identity.IsAuthenticated)
			{
				UserName = user.Identity.Name;
			}
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Id.HasValue)
		{
			var result = await StaffService.GetStaffById(Id.Value);

			if (result != null)
			{
				StaffData = result;
				_confirmText = "Save";
			}
			else
			{
				NavigationManager.NavigateTo("/staff");
			}
		}
	}

	private async Task HandleSubmit()
	{
		if (Id.HasValue)
		{
			// Update the CRUD data to include the UpdatedBy and DateUpdated fields
			StaffData.UpdatedBy = UserName;
			StaffData.DateUpdated = DateTime.Now;	
			await StaffService.UpdateStaff(Id.Value, StaffData);
		}
		else
		{
			// Update the CRUD data to include the CreatedBy and DateCreated fields
			StaffData.CreatedBy = UserName;
			StaffData.DateCreated = DateTime.Now;
			await StaffService.CreateStaff(StaffData);
		}

		NavigationManager.NavigateTo("/staffs");
	}

	private void Cancel()
	{
		NavigationManager.NavigateTo("/staffs");
	}

	List<GenderType> GenderTypes = new List<GenderType>
	{
		new GenderType(id: 1, name: "Male"),
		new GenderType(id: 2, name: "Female"),
		new GenderType(id: 3, name: "Apache Helicopter"),
		new GenderType(id: 4, name: "Other")
	};

	public class GenderType
	{
		public GenderType(int id, string name)
		{
			Id = id;
			Name = name;
		}

		public int Id { get; set; }
		public string Name { get; set; }
	}

}