@page "/staffs"
@inject IStaffService StaffService
@inject NavigationManager NavigationManager

<h3>Users</h3>

<table class="table">
	<thead>
		<tr>
			<th>Name</th>
			<th>Email</th>
			<th></th>
		</tr>
	</thead>
	<tbody>

		@foreach (var staff in StaffService.Staffs)
		{
			<tr>
				<td>@staff.Name</td>
				<td>@staff.Email</td>
				<td>
					<button class="btn btn-primary"
							@onclick="() => EditStaff(staff.Id)">
						<i class="oi oi-pencil"></i>
					</button>
					<button class="btn btn-danger"
							@onclick="() => DeleteStaff(staff.Id)">
						<i class="oi oi-trash"></i>
					</button>
				</td>
			</tr>
		}
	</tbody>
</table>
<button class="btn btn-primary"
		@onclick="CreateNewStaff">
	Create New Staff
</button>

<Confirm @ref="DeleteConfirmation"
         ConfirmationChanged="ConfirmDelete_Click"
         ConfirmationMessage=@($"Are you sure you want to delete:")>

</Confirm>


@code {
	private ConfirmBase DeleteConfirmation { get; set; }
	private int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await StaffService.GetStaffs();
	}

	private void EditStaff(int id)
	{
		NavigationManager.NavigateTo($"/staff/{id}");
	}

	private void CreateNewStaff()
	{
		NavigationManager.NavigateTo("/staff");
	}

	private void DeleteStaff(int id)
	{
		Id = id;
		DeleteConfirmation.Show();
	}

	private async void ConfirmDelete_Click(bool deleteConfirmed)
	{
		if (deleteConfirmed)
		{
			await StaffService.DeleteStaff(Id);
			await StaffService.GetStaffs();
			await InvokeAsync(StateHasChanged);
		}
	}
}
