@page "/profile"
@inject IProfileService ProfileService

@using AJSNutritions.Client.Services.ProfileService

<PageTitle>Profile</PageTitle>

<div class="container rounded bg-white mt-5 mb-5">
	<div class="row">
		<div class="col-md-3 border-right">
			<div class="d-flex flex-column align-items-center text-center p-3 py-5"><img class="rounded-circle mt-5" width="150px" src="https://st3.depositphotos.com/15648834/17930/v/600/depositphotos_179308454-stock-illustration-unknown-person-silhouette-glasses-profile.jpg"><span class="font-weight-bold">@ProfileData.FirstName, @ProfileData.LastName</span><span class="text-black-50">@UserName</span><span> </span></div>
		</div>
		<div class="col-md-5 border-right">
			<div class="p-3 py-5">
				<div class="d-flex justify-content-between align-items-center mb-3">
					<h4 class="text-right">Profile Settings</h4>
				</div>
				<div class="row mt-3">
					<EditForm Model="ProfileData" OnSubmit="HandleSubmit">
						<div class="col-md-15">
							<label for="FirstName">First Name</label>
							<InputText id="FirstName" @bind-Value="ProfileData.FirstName" class="form-control" />
						</div>
						<div class="col-md-15">
							<label for="LastName">Last Name</label>
							<InputText id="LastName" @bind-Value="ProfileData.LastName" class="form-control" />
						</div>
						<div class="col-md-15">
							<label for="DateOfBirth">Date Of Birth</label>
							<InputDate id="date" @bind-Value="ProfileData.DateOfBirth" class="form-control" />
						</div>
						<div class="col-md-15">
							<label for="height">Height(cm)</label>
							<InputNumber id="height" @bind-Value="ProfileData.Height" class="form-control"/>
						</div>
						<div class="col-md-15">
							<label for="weight">Weight(kg)</label>
							<InputNumber id="weight" @bind-Value="ProfileData.Weight" class="form-control"/>
						</div>
						<div class="col-md-15">
							<label for="Bmi">BMI</label>
							<div>@ProfileData.Bmi</div>
						</div>
						<div class="col-md-15">
							<label for="address">Address</label>
							<InputText id="address" @bind-Value="ProfileData.Address" class="form-control" />
						</div>
						<div>
							<label for="genderType">Gender</label>
							<select id="genderType" class="form-control" @bind="@ProfileData.Gender">
								@foreach (var genderType in GenderTypes)
								{
									<option value="@genderType.Id">@genderType.Name</option>
								}
							</select>
						</div>
						<br />
						<div style="font-size: 20px; margin-bottom: 20px; font-weight: bold;">
							<label> General Info </label>
						</div>
						<div class="col-md-15">
							<label for="Allergies">Allergies</label>
							<InputText id="Allergies" @bind-Value="ProfileData.Allergies" class="form-control" />
						</div>
						<div class="col-md-15">
							<label for="activityRate">Activity Rate</label>
							<InputText id="activityRate" @bind-Value="ProfileData.ActivityRate" class="form-control" />
						</div>
						<div class="col-md-15">
							<label for="MedicalHistory">Medical History</label>
							<InputText id="MedicalHistory" @bind-Value="ProfileData.MedicalHistory" class="form-control" />
						</div>
						<div class="col-md-15">
							<label for="TargetWeight">Target Weight</label>
							<InputNumber id="TargetWeight" @bind-Value="ProfileData.TargetWeight" class="form-control" />
						</div>
						<div class="col-md-15">
							<label for="TargetBmi">Target BMI</label>
							<InputNumber id="TargetBmi" @bind-Value="ProfileData.TargetBmi" class="form-control" />
						</div>
						<div class="col-md-15">
							<label for="TargetDate">Target Date</label>
							<InputDate id="TargetDate" @bind-Value="ProfileData.TargetDate" class="form-control" />
						</div>
						<br />
						<button class="btn btn-primary profile-button" type="submit">Save Profile</button>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
</div>


@code {

	public string? UserName { get; set; }
	public string? Email { get; set; }
	private AJSNutritions.Shared.Profile ProfileData = new AJSNutritions.Shared.Profile { };

	[CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (AuthenticationStateTask != null)
		{
			var authState = await AuthenticationStateTask;
			var user = authState.User;

			if (user.Identity is not null && user.Identity.IsAuthenticated)
			{
				UserName = user.Identity.Name;

				AJSNutritions.Shared.Profile res = await ProfileService.GetByUserName(UserName);

				if (res != null)
				{
					ProfileData = res;
				}
			}
		}
	}

	async Task HandleSubmit()
	{
		await ProfileService.Update(UserName, ProfileData);
		AJSNutritions.Shared.Profile res = await ProfileService.GetByUserName(UserName);

		if (res != null)
		{
			ProfileData = res;
		}
	}

	List<GenderType> GenderTypes = new List<GenderType>
	{
		new GenderType(id: 1, name: "Male"),
		new GenderType(id: 2, name: "Female"),
		new GenderType(id: 3, name: "Apache Helicopter"),
		new GenderType(id: 4, name: "Other")
	};

	public class GenderType 	
	{
		public GenderType(int id, string name)
		{
			Id = id;
			Name = name;
		}

		public int Id { get; set; }
		public string Name { get; set; }
	}
}

