@page "/foodlog"
@page "/foodlog/{id:int}"
@inject IDishService DishService
@inject IFoodLogService FoodLogService
@inject NavigationManager NavigationManager

@if(Id.HasValue)
{
	<PageTitle>Edit </PageTitle>
	<h3>Edit Food Log </h3>
}
else
{
	<PageTitle>Create a new Food Log</PageTitle>
	<h3>Create a new Food Log</h3>
}
<EditForm Model="FoodLogDto" OnSubmit="HandleSubmit">
	<div>
		<label for="date">Date</label>
		<InputDate id="date" @bind-Value="FoodLogDto.Date" class="form-control" />
	</div>
	<div>
		<label for="dish">Dish</label>
		<select id="dish" class="form-control" @bind="@SelectedDishID">
			@foreach (var dish in DishService.Dishes)
			{
				<option value="@dish.Id">@dish.Name</option>
			}
		</select>
	</div>
	<br />
	<button type="submit" class="btn btn-primary">@_confirmText</button>
	<button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>

</EditForm>


@code {
	[Parameter]
	public int? Id { get; set; }

	public FoodLogDto FoodLogDto { get; set; } = new AJSNutritions.Shared.FoodLogDto { Date = DateTime.Now };
	
	string _confirmText = "Create New Food Log";
	string? _userName;

	[CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }


	string selectedFoodLogID;
	int selectedDishID;

	int SelectedDishID
	{
		get => selectedDishID;
		set { selectedDishID = value; }
	}

	string SelectedFoodLogID
	{
		get => selectedFoodLogID;
		set { selectedFoodLogID = value; }
	}

	// When loaded, get the list of dishes
	protected override async Task OnInitializedAsync()
	{
		await DishService.GetDishes();
		await GetUser();
	}

	protected override async Task OnParametersSetAsync()
	{
		// The food log will be edited if the food id is provided in the URL.
		if (Id.HasValue)
		{
			var result = await FoodLogService.GetFoodLogById(Id.Value);
			// If the food log is not found, navigate back to the food log list.
			if (result == null)
			{
				NavigationManager.NavigateTo("/foodlogs");
			}
			else 			
			{
				FoodLogDto = result;
				_confirmText = "Save";
			}
		}
	}

	async Task HandleSubmit()
	{
		if (Id.HasValue)
		{	// Update the food log
			await FoodLogService.UpdateFoodLog(Id.Value, FoodLogDto);
		}
		else
		{  // Create the food log
			FoodLogDto.UserName = _userName;
			await FoodLogService.CreateFoodLog(FoodLogDto);
		}
		// After creating a new food or editing an existing log, navigate to the food log list page
		NavigationManager.NavigateTo("/");
	}

	void Cancel()
	{	// Navigate back to the food log list
		NavigationManager.NavigateTo("/");
	}

	private async Task GetUser()
	{
		var authState = await AuthenticationStateTask;
		var user = authState.User;

		if (user.Identity is not null && user.Identity.IsAuthenticated)
		{
			_userName = user.Identity.Name;
		}
	}
}
