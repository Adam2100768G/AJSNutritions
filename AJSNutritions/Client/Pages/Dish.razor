@page "/dish"
@page "/dish/{id:int}"
@inject IDishService DishService
@inject NavigationManager NavigationManager
@inject HttpInterceptorService _interceptor
@implements IDisposable

@if(Id.HasValue)
{
	<PageTitle>Edit @DishData.Name</PageTitle>
	<h3>Edit @DishData.Name</h3>
}
else
{
	<PageTitle>Create a new Dish</PageTitle>
	<h3>Create a new Dish</h3>
}

<EditForm Model="DishData" OnSubmit="HandleSubmit">
	<div>
		<label for="name">Name</label>
		<InputText id="name" @bind-Value="DishData.Name" class="form-control" />
	</div>
	<div>
		<label for="dishType">Dish Type</label>
		<select id="dishType" class="form-control" @bind="@DishData.DishType">
			@foreach (var dishType in _dishTypes)
			{
				<option value="@dishType.Id">@dishType.Name</option>
			}
		</select>
	</div>
	<div>
		<label for="calories">Calories</label>
		<InputNumber id="calories" @bind-Value="DishData.Calories" class="form-control" />
	</div>
	<div>
		<label for="desc">Description</label>
		<InputText id="desc" @bind-Value="DishData.Description" class="form-control" />
	</div>
	<br />
	<button type="submit" class="btn btn-primary">@_confirmText</button>
	<button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>
	

@code {
	[Parameter] public int? Id { get; set; }
	[CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

	public string? UserName { get; set; }
	public AJSNutritions.Shared.Domain.Dish DishData { get; set; } = new() { Name = "New Dish" };

	string _confirmText = "Create";

	readonly List<DishType> _dishTypes = new()
	{
		new DishType(1, "Breakfast"),
		new DishType(2, "Lunch"),
		new DishType(3, "Dinner"),
		new DishType(4, "Snack")
	};

	protected override async Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		// Get the logged user for CRUD operations
		if (AuthenticationStateTask != null)
		{
			var authState = await AuthenticationStateTask;
			var user = authState.User;

			if (user.Identity is not null && user.Identity.IsAuthenticated)
			{
				UserName = user.Identity.Name;
			}
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		_interceptor.MonitorEvent();
		if (Id.HasValue)
		{
			var result = await DishService.GetDishById(Id.Value);

			if (result != null)
			{
				DishData = result;
				_confirmText = "Save";
			}
			else
			{
				NavigationManager.NavigateTo("/dish");
			}
		}
	}

	async Task HandleSubmit()
	{
		_interceptor.MonitorEvent();
		if (DishData.Id == 0)
		{
			// Update the CRUD data to include the UpdatedBy and DateUpdated fields
			DishData.UpdatedBy = UserName;
			DishData.DateUpdated = DateTime.Now;
			await DishService.CreateDish(DishData);
		}
		else
		{
			// Update the CRUD data to include the CreatedBy and DateCreated fields
			DishData.CreatedBy = UserName;
			DishData.DateCreated = DateTime.Now;
			await DishService.UpdateDish(DishData.Id, DishData);
		}
	}

	private void Cancel()
	{
		_interceptor.MonitorEvent();
		NavigationManager.NavigateTo("/dishes");
	}

	public class DishType
	{
		public DishType(int id, string name)
		{
			Id = id;
			Name = name;
		}

		public int Id { get; set; }
		public string Name { get; set; }
	}

	public void Dispose()
	{
		_interceptor.DisposeEvent();
	}
}
